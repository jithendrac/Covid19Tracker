{"version":3,"sources":["infoBox.js","util.js","map.js","table.js","linegraph.js","App.js","reportWebVitals.js","index.js"],"names":["InfoBox","onClick","title","cases","total","className","Card","CardContent","Typography","color","casesTypeColors","hex","multiplier","recovered","deaths","sortData","data","sortedData","sort","a","b","showDataOnMap","casesType","map","country","Circle","center","countryInfo","lat","long","filloOpacity","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","numeral","format","convert","Map","countries","zoom","console","log","TileLayer","url","attribution","Table","tableData","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","tricks","callback","index","values","LineGraph","useState","chartDataset","setChartDataset","buildChartData","lastDataPoint","chartData","d","newDatapoint","x","y","push","useEffect","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","selectedCountry","setSelectedCountry","setCountryInfo","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","allCountryInfo","setAllCountryInfo","caseType","setCaseType","name","iso2","getcountriesdata","onCountryChange","event","selected","target","Select","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d22830b5.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport \"./infoBox.css\"\r\n\r\nfunction InfoBox({onClick,title,cases,total}) {\r\n    return (\r\n        <div className=\"infoBox\">\r\n            <Card onClick={onClick}>\r\n                <CardContent>\r\n                    <Typography color=\"textPrimary\" className=\"infoBox_title\">\r\n                        {title}\r\n                    </Typography>\r\n                    <h2 className=\"infoBox_cases\">{cases}</h2>\r\n                    <Typography color=\"textPrimary\" className=\"infoBox_total\">\r\n                        Total:{total}\r\n                    </Typography>\r\n                </CardContent>\r\n            </Card>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default InfoBox; ","import React from \"react\"\r\nimport numeral from \"numeral\"\r\nimport { Circle, Popup } from \"react-leaflet\";\r\n\r\nconst casesTypeColors = {\r\n    cases:{\r\n        hex:\"#CC1034\",\r\n        multiplier:800\r\n    },\r\n    recovered:{\r\n        hex:\"#7dd71d\",\r\n        multiplier:1200\r\n    },\r\n    deaths:{\r\n        hex:\"#fb4443\",\r\n        multiplier:2000\r\n    }\r\n}\r\n\r\nexport const sortData = (data) => {\r\n    const sortedData = [...data];\r\n\r\n    sortedData.sort((a,b) =>{\r\n        return a.cases>b.cases ? -1 : 1;\r\n    })\r\n    return sortedData;\r\n};\r\n\r\nexport const showDataOnMap = (data,casesType = \"cases\") => \r\ndata.map((country) => (\r\n    <Circle\r\n        center={[country.countryInfo.lat, country.countryInfo.long]}\r\n        filloOpacity={0.4}\r\n        color={casesTypeColors[casesType].hex}\r\n        fillColor={casesTypeColors[casesType].hex}\r\n        radius={\r\n            Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n        }\r\n    >\r\n    <Popup>\r\n            <div className=\"info_container\">\r\n                <div className=\"info_flag\"\r\n                    style={{backgroundImage: `url(${country.countryInfo.flag})` }}\r\n                />\r\n                <div className=\"info_name\">{country.country}</div>\r\n                <div className=\"info_cases\">Cases: {numeral(country.cases).format(\"0,0\")}</div>\r\n                <div className=\"info_recovered\">Recovered: {numeral(country.recovered).format(\"0,0\")}</div>\r\n                <div className=\"info_deaths\">Deaths: {numeral(country.deaths).format(\"0,0\")}</div>\r\n            </div>\r\n    </Popup>\r\n    </Circle>\r\n) \r\n)\r\n\r\nexport const convert = (data) =>\r\ndata ? `+${numeral(data).format(\"0,0a\")}` : \"+0\";","import React from \"react\"\r\n\r\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\"\r\nimport \"./Map.css\"\r\nimport { showDataOnMap } from \"./util\"\r\n\r\nfunction Map({countries, casesType, center, zoom}) {\r\n    console.log(countries)\r\n    return (\r\n        <div className=\"map\">\r\n            <LeafletMap center={center} zoom={zoom}>\r\n                <TileLayer\r\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                />\r\n            {showDataOnMap(countries,casesType)}\r\n            </LeafletMap>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Map; ","import React from \"react\";\r\nimport './table.css';\r\nimport numeral from \"numeral\"\r\n\r\nfunction Table({tableData}) {\r\n    return (\r\n        <div className=\"table\">\r\n            {\r\n                tableData.map(({country,cases}) =>(\r\n                    <tr>\r\n                        <td>{country}</td>\r\n                        <td><strong>{numeral(cases).format(\"0,0\")}</strong></td>\r\n                    </tr>\r\n                ))\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Table;","import { red } from \"@material-ui/core/colors\";\r\nimport { value } from \"numeral\";\r\nimport React,{useState, useEffect} from \"react\"\r\nimport { Line } from \"react-chartjs-2\"\r\nimport numeral from \"numeral\"\r\n\r\nconst options = {\r\n    legend:{\r\n        display:false,\r\n    },\r\n    elements:{\r\n        point: {\r\n            radius:0,\r\n        },\r\n    },\r\n    maintainAspectRatio: false,\r\n    tooltips: {\r\n        mode: \"index\",\r\n        intersect: false,\r\n        callbacks: {\r\n            label: function(tooltipItem, data) {\r\n                return numeral(tooltipItem.value).format(\"+0,0\");\r\n            },\r\n        },\r\n    },\r\n    scales:{\r\n        xAxes: [\r\n            {\r\n                type: \"time\",\r\n                time: {\r\n                    format: \"MM/DD/YY\",\r\n                    tooltipFormat: \"ll\",\r\n                },\r\n            },\r\n        ],\r\n        yAxes: [\r\n            {\r\n                gridLines: {\r\n                    display: false,\r\n                },\r\n                tricks: {\r\n                    callback: function (value, index, values) {\r\n                            return numeral(value).format(\"0a\");\r\n                    },\r\n                },\r\n            },\r\n        ],\r\n    },\r\n}\r\n\r\nfunction LineGraph({casesType}) {\r\n    const [chartDataset, setChartDataset] = useState([]);\r\n    console.log(casesType)\r\n    const buildChartData = (data, casesType) => {\r\n        let lastDataPoint;\r\n        const chartData=[]\r\n        for(let d in data[casesType]){\r\n            if(lastDataPoint){\r\n                let newDatapoint ={\r\n                    x: d,\r\n                    y: data[casesType][d]-lastDataPoint\r\n                }\r\n                chartData.push(newDatapoint);\r\n            }\r\n            lastDataPoint = data[casesType][d];\r\n        }\r\n        return chartData;\r\n    };\r\n\r\n    useEffect(() => {\r\n        const fetchData = async() => {\r\n        await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n            .then((response) => response.json())\r\n            .then((data) => {\r\n                console.log(casesType)\r\n                const chartData = buildChartData(data,casesType);\r\n                console.log(chartData)\r\n                setChartDataset(chartData);\r\n            });\r\n        }\r\n        fetchData();\r\n    },[casesType])\r\n\r\n    return (\r\n        <div>\r\n            {chartDataset?.length > 0 && (\r\n                <Line \r\n                options={options}\r\n                data={{\r\n                        datasets:[\r\n                            {\r\n                                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n                                borderColor:\"#CC1034\",\r\n                                data: chartDataset,\r\n                            }\r\n                        ]\r\n                }}\r\n            />\r\n            )}\r\n        </div> \r\n    )\r\n}\r\n\r\nexport default LineGraph;","import React,{ useEffect, useState} from \"react\";\nimport './App.css';\n\nimport InfoBox from './infoBox'\nimport Map from './map'\nimport Table from './table'\nimport {sortData} from './util'\nimport LineGraph from './linegraph'\n\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport \"leaflet/dist/leaflet.css\"\nimport { convert } from \"./util\"\n\nfunction App() {\n  const [countries, setCountries]=useState([]);\n  const [selectedCountry, setSelectedCountry]=useState(\"worldwide\");\n  const [countryInfo, setCountryInfo]=useState([]);\n  const [tableData, setTableData]=useState([]);\n  const [mapCenter, setMapCenter]=useState({lat: 34.80746, lng: -40.4786})\n  const [mapZoom, setMapZoom]=useState(3);\n  const [allCountryInfo, setAllCountryInfo]=useState([]);\n  const [caseType, setCaseType]=useState(\"cases\");\n\n  useEffect(() =>{\n    //This function gets executed once when the component loads and when the countries value changes.\n    //async is used because we need to send a request wait for the response then execute over the response.\n\n    const getcountriesdata = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n      .then((response) => response.json())\n      .then((data) => {\n          setAllCountryInfo(data);\n          const countries = data.map((country) => (\n            {\n              name: country.country,\n              value: country.countryInfo.iso2,\n            }\n          ));\n\n          const sortedData = sortData(data);\n          setTableData(sortedData);\n          setCountries(countries);\n        });\n    }\n    getcountriesdata();\n  },[])\n\n  useEffect(() =>{\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n    .then((response) => response.json())\n    .then((data) => {\n      setCountryInfo(data);\n    });\n  },[])\n\n  const onCountryChange = async(event) => {\n    const selected = event.target.value;\n    console.log(selected)\n    const url = selected === \"worldwide\" ? \"https://disease.sh/v3/covid-19/all\" : `https://disease.sh/v3/covid-19/countries/${selected}`;\n    \n    await fetch(url)\n    .then((response) => response.json())\n    .then((data) => {\n      console.log(data)\n      setSelectedCountry(selected)\n      setCountryInfo(data);\n      setMapCenter([data.countryInfo.lat, data.countryInfo.long])\n      setMapZoom(4);\n    });\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"app_left\">\n      <div className=\"app_header\">\n          <h1>COVID 19 TRACKER</h1>\n        <Select\n          value={selectedCountry}\n          onChange={onCountryChange}\n        >\n          <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n          {countries.map((country) => (\n              <MenuItem value={country.value}>{country.name}</MenuItem>\n          ))\n          }\n        </Select>\n      </div>\n      <div className=\"app_stats\">\n          <InfoBox onClick={(e) => setCaseType('cases')} title=\"Corona Virus Cases\" cases={convert(countryInfo.todayCases)} total={convert(countryInfo.cases)} />\n          <InfoBox onClick={(e) => setCaseType('recovered')} title=\"Recovered\" cases={convert(countryInfo.todayRecovered)} total={convert(countryInfo.recovered)} />\n          <InfoBox onClick={(e) => setCaseType('deaths')} title=\"Deaths\" cases={convert(countryInfo.todayDeaths)} total={convert(countryInfo.deaths)} />\n      </div>\n      <div className=\"app_map\">\n          <Map countries={allCountryInfo} casesType={caseType} center={mapCenter} zoom={mapZoom} />\n      </div>\n      </div>\n  \n      <Card className=\"app_right\">\n        <CardContent>\n          <h2>Live Cases by Country</h2>\n          <Table tableData={tableData} />\n          <h2>World Wide New {caseType}</h2>\n          <LineGraph casesType={caseType} />\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}